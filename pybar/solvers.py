#!/usr/bin/env python
# -*- coding: utf-8 -*-
import numpy as np
import scipy.sparse as sparse
from scipy.sparse.linalg import dsolve
import pandas as pd
from scipy.linalg import lu_factor, lu_solve
from .postprocessing import Postprocess
#import scipy as sp
""" This module contains the different solvers used by the program.
"""


class Solver(object):
    """Parent class for the solvers used"""

    def __init__(self, model, **kwargs):
        """Initialize solver

        :model: TODO
        :**kwargs: Additional options:

            - :output: list of keywords specifying the different results that need to be
              computed after the solution is found.
              Accepted values are:
                - 'reactions'
                - 'internal forces'
                - 'stresses'
                - 'strains'
                - 'energy'


        """
        self._model = model
        # The variable 'output' stores the different results that need
        # to be computed after the solution is found.
        # FIXME: implement this
        deffault_output = ['displacements', 'forces']
        self._output_request = kwargs.get('output', None)


class StaticSolver(Solver):
    """Linear Static solver used to solve the most typical problems"""

    def __init__(self, model, **kwargs):
        """Initialize the solver instance

        Optional parameters:
        nlg: boolean, consider geometrical nonlinearities (Default False)

        """
        Solver.__init__(self, model, **kwargs)

    def solve(self):
        """Solves the problem
        :returns: numpy array

        """
        # Assemble the stiffness matrix of the system
        K = self._model._assemble_global_K()
        # Assemble the vector of applied loads (FIXME)
        P = self._model._generate_loading_vector()
        # Assemble the vector of applied element loads
        P_e = self._model._generate_element_loading_vector()

        # Apply Dirichlet boundary conditions
        # Get the dof corresponding to Dirichlet border conditions
        V = self._model._generate_displacement_vector()
        dirich_ind = self._model._dof_dirichlet
        # Calculate forces generated by the BC
        P_dirich = K.todense()[dirich_ind, :] @ V
        # Create new loading vector, including the forces generated by
        # the Dirichlet BC and element forces:
        P_new = P[:]
        # - Dirichlet BC
        P_new[dirich_ind] = P[dirich_ind] - P_dirich
        # - Add the element loads to the global loading vector
        P_new += P_e

        # Generate the new augmented stiffness matrix
        # Takes into account the Dirichlet BC
        K_new = np.copy(K.todense())
        K_new[dirich_ind, :] = 0.
        K_new[:, dirich_ind] = 0.

        for index in dirich_ind:
            K_new[index, index] = 1.
            P_new[index] = V[index]

        # Convert to sparse matrix
        K_new = sparse.csr_matrix(K_new)

        # Solve the augmented system (nodal displacements are computed)
        V_res = dsolve.spsolve(K_new, P_new, use_umfpack=False)

        # Initialize a Result object
        # - Copy the data of the model
        model_data = self._model.export_model_data()
        # - Create Result object
        result = Result(model=model_data)

        # Add nodal displacements to the result object
        nodal_displ = self.process_nodal_displ(V_res)
        result.add_result('nodal displacements', nodal_displ)

        # Add nodal reactions to the results object
        self.calc_nodal_reactions(result, V_res, K, P_e)

        # Add nodal forces to the result object
        self.calc_nodal_forces(result, V_res, K, P_e)

        # Add end forces to the results object
        self.calc_end_forces(result, V_res)

        # Postprocess the results according to the specified in 'output'
        # variable
        result = self.postprocess(result)

        return result

    def postprocess(self, result):
        """Postprocess the specified results given in the 'output' variable

        :result: TODO
        :returns: TODO

        """
        #
        postp = Postprocess(result)
        #
        for curr_output in self._output_request:
            if curr_output == 'internal forces':
                # Calculate forces along the frame elements
                postp.calc_all_internal_forces()
            elif curr_output == 'deflections':
                postp.calc_all_deflections()
            # FIXME: not sure if put this here
            elif curr_output == 'stresses':
                postp.calc_stresses(result)
            else:
                print('Post-processing of ' + curr_output +
                      ' not implemented yet.')

        return result

    def process_nodal_displ(self, nodal_displ):
        """Return nodal displacements as a pandas DataFrame instance.
        Each column represents a DOF and the index correspond to the respective node
        number.

        :nodal_displ: TODO
        :returns: TODO

        """
        n_dimensions = self._model.n_dimensions

        nodes = [n for i, n in self._model.nodes.items()]

        # Initialize numpy array
        ar_nodal_displ = np.zeros((len(nodes), n_dimensions), dtype=np.float64)
        index_nodes = np.zeros(len(nodes), dtype=np.int)

        # Loop for each node of the model
        # TODO: implement 3D case
        for ix, curr_node in enumerate(nodes):
            ix_node = curr_node.number
            aux_arr = np.array(
                [nodal_displ[ix_node * 3], nodal_displ[ix_node * 3 + 1]])
            ar_nodal_displ[ix, :] = aux_arr
            index_nodes[ix] = curr_node.number

        index_label = ['x', 'y']

        # Create the data frame
        df_nodal_displ = pd.DataFrame(data=ar_nodal_displ, index=index_nodes,
                                      dtype=np.float64, columns=index_label)

        return df_nodal_displ

    def calc_nodal_forces(self, result, nodal_displ, K, elem_load):
        """TODO: Docstring for calc_nodal_forces.

        :param result: TODO
        :param nodal_displ: TODO
        :param K: TODO
        :param elem_load: TODO
        :returns: TODO

        """
        nodal_forces = K @ nodal_displ - elem_load
        #
        n_dof = self._model.n_dof_per_node

        nodes = [n for i, n in self._model.nodes.items()]

        # Initialize numpy array
        ar_nodal_forces = np.zeros((len(nodes), n_dof), dtype=np.float64)
        index_nodes = np.zeros(len(nodes), dtype=np.int)

        # Loop for each node of the model
        # TODO: implement 3D case
        for ix, curr_node in enumerate(nodes):
            ix_node = curr_node.number
            aux_arr = np.array([nodal_forces[ix_node * 3:ix_node * 3 + 3]])
            ar_nodal_forces[ix, :] = aux_arr
            index_nodes[ix] = curr_node.number

        index_label = ['fx', 'fy', 'mz']

        # Create the data frame
        df_nodal_forces = pd.DataFrame(data=ar_nodal_forces, index=index_nodes,
                                       dtype=np.float64, columns=index_label)

        result.add_result('nodal forces', df_nodal_forces)

        return df_nodal_forces

    def calc_nodal_reactions(self, result, nodal_displ, K, elem_load):
        """Calculate the nodal reactions of the model.

        :result: TODO
        :nodal_displ: nodal displacements
        :K: stiffness matrix
        :elem_forces: element forces vector
        :returns: TODO

        """
        # Get the positions of the Dirichlet birder conditions
        dirich_ind = result._model._dof_dirichlet
        # (Take the element loads into account with 'P_e')
        nodal_react = (K @ nodal_displ)[dirich_ind] - elem_load[dirich_ind]
        # Add result to the Result object
        result.add_result('nodal reactions', nodal_react)

        # Make dictionary with nodes and respective node reactions
        for ix, index_r in enumerate(dirich_ind):
            node_i, dof_i = self._model.get_node_and_dof(index_r)
            # Add the reactions to the dictionary of reactions of the
            # corresponding node
            node_i.reactions[dof_i] = nodal_react[ix]

        return nodal_react

    def calc_end_forces(self, result, nodal_displ):
        """
        Calculate the internal forces of beam elements.

        :result: Result object
        :returns: TODO

        """
        # Initialize dictionary with results of the end forces
        end_forces = dict()
        # Get the node freedom map table
        nfmt = self._model.nfmt
        # Get the node freedom allocation of every node
        nfat = self._model.nfat
        # Calculate end forces for each element
        for num, element in self._model.beams.items():
            # Get the transformation matrix for the element
            Te = element.transformation_matrix
            # Get the stiffness matrix of the element in global coordinates
            # FIXME!
            Ke = element._Ke
            # Get the displacements of the corresponding DOFs in global coordinates
            # - Initialize matrix
            v_i = np.zeros(element._k_size, dtype=np.float64)
            P_e_i = np.zeros(element._k_size, dtype=np.float64)
            # Get the node freedom allocation map table of the current element
            enfmt = element.enfmt
            # Initiate element load vector
            # Assemble matrix with element nodal displacements of the current
            # beam element
            for n_node_e, node in element._nodal_connectivity.items():
                # Indices for the array v_i
                index_base = element.get_index_array_of_node(n_node_e)
                i_index = index_base + enfmt[n_node_e]
                # Indices corresponding to the position of the DOF of
                # the current node analyzed (global system)
                j_index = index_base + nfmt[node.number]
                # Add the results for these DOFs to the v_i array
                v_i[i_index] = nodal_displ[j_index]  # DOF of node selected
                # Account for element loads
                if len(element._loads) > 0:
                    # Same indices are used here
                    for load in element._loads:
                        P_e_i[i_index] += load._load_vector_global[i_index]

            # FIXME:
            # If an element uses release_end option, then the displacement (rotation) needs
            # to be calculated sepparately.
            """
            if element.release_end_1 == True or element.release_end_2 == True:
                import scipy.sparse as sparse
                aux = element._calc_condensed_displacements(v_i)
                #v_i[5] = aux
                #ke = element._assemble_Ke()
                ## To sparse
                #ke_local = sparse.csr_matrix(ke)
                ## Transform to global coordinates:
                #Te = element.transformation_matrix
                #Ke = Te.T.dot(ke_local.dot(Te))
            """

            # Get the End Forces of the element in global coordinates
            P_i_global = Ke @ v_i - P_e_i
            # Transform End Forces to local coordinates
            P_i_local = Te @ P_i_global
            # Add End Forces to the dictionary of End Forces of the result object
            # for the current beam element
            end_forces[num] = P_i_local
            # Add the corresponding nodal forces to the matrix to
            # calculate the sectional forces
            # - Axial force
            element._poly_sec_force[0, 0] += -P_i_local[0]
            # - Shear force
            element._poly_sec_force[0, 1] += P_i_local[1]
            # - Moment
            element._poly_sec_force[0, 2] += -P_i_local[2]
            element._poly_sec_force[1, 2] += P_i_local[1]

        # Add results to the result object
        result.add_result('end forces', end_forces)

        return end_forces


class Result(object):
    """An object to store the data obtained from the solving process"""

    def __init__(self, model):
        """TODO: to be defined1. """
        # Analyzed model
        self._model = model
        # Initiate the container for the results
        self.data = dict()
        # Initialize dictionary with information of minimum and maximum
        # values of the results, and other useful data.
        self.metadata = dict()

    def add_result(self, name, results):
        """Add results to the results dictionary

        :name: TODO
        :results: TODO
        :returns: TODO

        """
        self.data[name] = results

        return self

    def add_metadata(self, name, results):
        """Add results to the results dictionary

        :name: TODO
        :results: TODO
        :returns: TODO

        """
        self.metadata[name] = results

        return self
